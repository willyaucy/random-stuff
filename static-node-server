#!/usr/bin/env node

import { createReadStream, existsSync } from 'fs';
import { createServer } from 'http';
import { resolve } from 'path';
import { stat } from 'fs/promises';

if (['--help', '-h'].includes(process.argv[process.argv.length - 1])) {
  console.log([
    'Usage: ./static-node-server',
    'Base path and port can be customized with environment variables',
    'Example: BASE_PATH=~/someFolder PORT=9000 ./static-node-server'
  ].join('\n'));
  process.exit(0);
}

const basePath = resolve((process.env.BASE_PATH || process.env.PWD).replace(/(.*)\/?$/, '$1'));
const port = process.env.PORT || 8080;
createServer(withErrorHandling(handleRequest)).listen(port);
console.log(`Serving content from ${basePath} at port ${port}`);

async function handleRequest(req, res) {
  const indexPath = 'index.html';
  const uriComponent =
      req.url === '/' && existsSync(indexPath)
          ? indexPath
          : decodeURIComponent(req.url).normalize();

  res.on('close', () => console.log(`${req.method} ${uriComponent} ${res.statusCode}`));
  const filePath = resolve(`${basePath}/${uriComponent}`);
  
  if (existsSync(filePath)) {
    const stats = await stat(filePath);
    if (stats.isFile()) {
      res.setHeader('Content-Length', stats.size);
    }
  }

  createReadStream(filePath)
      .on('error', err => handleError(res, err))
      .pipe(res);
}

function withErrorHandling(fn) {
  return async (req, res) =>  {
    try {
      await fn(req, res);
    } catch (err) {
      handleError(res, err);
    }
  };
}

function handleError(res, err) {
  switch (err.code) {
    case 'ENOENT':
      res.statusCode = 404;
      break;
    case 'EISDIR':
    case 'ENOTDIR':
      res.statusCode = 400;
      break;
    default:
      console.error(err);
      res.statusCode = 500;
  }

  res.end(JSON.stringify(err));
}
